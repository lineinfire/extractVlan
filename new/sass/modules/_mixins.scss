@mixin placeholder-input($input, $color) {
  #{$input} input::-webkit-input-placeholder { color:$color; }
  #{$input} input:-moz-placeholder { color:$color; }
  #{$input} input::-moz-placeholder { color:$color; }
  #{$input} input::-ms-input-placeholder { color:$color; }
}

@mixin placeholder-textarea($textarea, $color) {
  #{$textarea} textarea::-webkit-input-placeholder { color:$color; }
  #{$textarea} textarea:-moz-placeholder { color:$color; }
  #{$textarea} textarea::-moz-placeholder { color:$color; }
  #{$textarea} textarea::-ms-input-placeholder { color:$color; }
}

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
       }
      }
     }
        
   @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
 }
 @if $fadeout == false{
   @if $skew == true and ( $type == box ){
     @for $i from 0 to $length - 1 {
            $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
   }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
 }
 $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}


@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);
 
  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);
 
  // Convert to percentage and return
  @return 100% * $number / 255;
}
 
@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}

@mixin colorize($attr, $colName, $colCol, $prefix:'', $pseudo:'', $parent:true){
  @if $pseudo != ''{
    $pseudo : ':'+$pseudo;
  }
  @if $parent {
    &.#{$prefix}#{$colName}#{$pseudo} {
      #{$attr}:$colCol;
      @content;
    }
    } @else {
      .#{$prefix}#{$colName} {
        #{$attr}:$colCol;
        @content;
      }
    }
  }


  @function switch-shadow($color) {
  $bshadow:   30.5px -5px 0 -5px $color,
              30.5px -4px 0 -5px $color,
              30.5px -3px 0 -5px $color,
              30.5px -2px 0 -5px $color,
              30.5px -1px 0 -5px $color,
              30.5px 0px 0 -5px $color,
              30.5px 1px 0 -5px $color,
              30.5px 2px 0 -5px $color,
              30.5px 3px 0 -5px $color,
              30.5px 4px 0 -5px $color,
              30.5px 5px 0 -5px $color
            ;
  @return $bshadow;
}
